
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, o as binding_callbacks, p as bind, q as handle_promise, v as validate_slots, a4 as onMount, u as get, w as ihttp, b as space, A as create_component, e as element, f as attr_dev, c as add_location, g as set_style, h as insert_dev, B as mount_component, j as append_dev, a0 as set_input_value, Z as listen_dev, C as add_flush_callback, D as update_await_block_branch, E as transition_in, G as transition_out, l as detach_dev, H as destroy_component, _ as run_all, ao as URI_REWARA_LIST, ak as URI_SEARCH, X as validate_each_argument, n as noop, I as empty, t as text, a3 as src_url_equal, a6 as set_data_dev, Y as destroy_each } from './main-1d28085c.js';
import { H as Head } from './Head-9bde3955.js';
import { a as animateScroll, s as scrollToTop } from './index-b6dab8e7.js';
import './Router-3cee6396.js';

/* src\pages\IndeksRewara.svelte generated by Svelte v3.46.4 */
const file = "src\\pages\\IndeksRewara.svelte";

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i];
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i];
	return child_ctx;
}

// (83:4) {:catch error}
function create_catch_block(ctx) {
	let p;

	const block = {
		c: function create() {
			p = element("p");
			p.textContent = "an error occured";
			add_location(p, file, 83, 4, 2846);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_catch_block.name,
		type: "catch",
		source: "(83:4) {:catch error}",
		ctx
	});

	return block;
}

// (63:4) {:then data}
function create_then_block(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*data*/ ctx[18].length > 0) return create_if_block;
		if (/*data*/ ctx[18].length == 0) return create_if_block_1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type && current_block_type(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if (if_block) if_block.d(1);
				if_block = current_block_type && current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d: function destroy(detaching) {
			if (if_block) {
				if_block.d(detaching);
			}

			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_then_block.name,
		type: "then",
		source: "(63:4) {:then data}",
		ctx
	});

	return block;
}

// (80:35) 
function create_if_block_1(ctx) {
	let p;

	const block = {
		c: function create() {
			p = element("p");
			p.textContent = "Artikel tidak ditemukan";
			set_style(p, "text-align", "center");
			set_style(p, "font-size", "0.8rem");
			add_location(p, file, 80, 8, 2730);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(80:35) ",
		ctx
	});

	return block;
}

// (64:4) {#if data.length > 0}
function create_if_block(ctx) {
	let each_1_anchor;
	let each_value_1 = /*data*/ ctx[18];
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*dataPromise*/ 32) {
				each_value_1 = /*data*/ ctx[18];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(64:4) {#if data.length > 0}",
		ctx
	});

	return block;
}

// (65:8) {#each data as d}
function create_each_block_1(ctx) {
	let a;
	let div2;
	let div0;
	let img;
	let img_src_value;
	let img_alt_value;
	let t0;
	let div1;
	let p0;
	let t2;
	let p1;
	let t3_value = /*d*/ ctx[15].title + "";
	let t3;
	let t4;
	let a_href_value;

	const block = {
		c: function create() {
			a = element("a");
			div2 = element("div");
			div0 = element("div");
			img = element("img");
			t0 = space();
			div1 = element("div");
			p0 = element("p");
			p0.textContent = "Rewara";
			t2 = space();
			p1 = element("p");
			t3 = text(t3_value);
			t4 = space();

			if (!src_url_equal(img.src, img_src_value = `${({
				"env": {
					"DOMAIN": "https://admin-dev.jurno.id/",
					"URL_API": "https://api-dev.jurno.id/api/newsmap/v1/",
					"URL_IMAGE": "https://admin-dev.newsmap.id/uploads/",
					"URL_CUSTOM_HTML": "https://admin-dev.newsmap.id/files/",
					"NO_IMAGE": "./image/logo-jurno-web.svg",
					"isProd": false
				}
			})['env']['URL_IMAGE']}images/rewara/${/*d*/ ctx[15].thumbnail}`)) attr_dev(img, "src", img_src_value);

			attr_dev(img, "alt", img_alt_value = /*d*/ ctx[15].title);
			attr_dev(img, "class", "svelte-1bab5vg");
			add_location(img, file, 68, 20, 2081);
			attr_dev(div0, "class", "left svelte-1bab5vg");
			add_location(div0, file, 67, 16, 2041);
			attr_dev(p0, "class", "author svelte-1bab5vg");
			add_location(p0, file, 71, 20, 2472);
			attr_dev(p1, "class", "article-title svelte-1bab5vg");
			add_location(p1, file, 72, 20, 2522);
			attr_dev(div1, "class", "credit svelte-1bab5vg");
			add_location(div1, file, 70, 16, 2430);
			attr_dev(div2, "class", "article svelte-1bab5vg");
			add_location(div2, file, 66, 12, 2002);
			set_style(a, "cursor", "pointer");
			attr_dev(a, "href", a_href_value = `/rewara/${/*d*/ ctx[15].slug}`);
			attr_dev(a, "class", "svelte-1bab5vg");
			add_location(a, file, 65, 8, 1935);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, div2);
			append_dev(div2, div0);
			append_dev(div0, img);
			append_dev(div2, t0);
			append_dev(div2, div1);
			append_dev(div1, p0);
			append_dev(div1, t2);
			append_dev(div1, p1);
			append_dev(p1, t3);
			append_dev(a, t4);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*dataPromise*/ 32 && !src_url_equal(img.src, img_src_value = `${({
				"env": {
					"DOMAIN": "https://admin-dev.jurno.id/",
					"URL_API": "https://api-dev.jurno.id/api/newsmap/v1/",
					"URL_IMAGE": "https://admin-dev.newsmap.id/uploads/",
					"URL_CUSTOM_HTML": "https://admin-dev.newsmap.id/files/",
					"NO_IMAGE": "./image/logo-jurno-web.svg",
					"isProd": false
				}
			})['env']['URL_IMAGE']}images/rewara/${/*d*/ ctx[15].thumbnail}`)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*dataPromise*/ 32 && img_alt_value !== (img_alt_value = /*d*/ ctx[15].title)) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (dirty & /*dataPromise*/ 32 && t3_value !== (t3_value = /*d*/ ctx[15].title + "")) set_data_dev(t3, t3_value);

			if (dirty & /*dataPromise*/ 32 && a_href_value !== (a_href_value = `/rewara/${/*d*/ ctx[15].slug}`)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(65:8) {#each data as d}",
		ctx
	});

	return block;
}

// (49:24)           {#each placeholder as d}
function create_pending_block(ctx) {
	let each_1_anchor;
	let each_value = /*placeholder*/ ctx[6];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_pending_block.name,
		type: "pending",
		source: "(49:24)           {#each placeholder as d}",
		ctx
	});

	return block;
}

// (50:8) {#each placeholder as d}
function create_each_block(ctx) {
	let div3;
	let div1;
	let div0;
	let t0;
	let div2;
	let p0;
	let t1;
	let p1;
	let t2;
	let p2;
	let t3;
	let p3;
	let t4;

	const block = {
		c: function create() {
			div3 = element("div");
			div1 = element("div");
			div0 = element("div");
			t0 = space();
			div2 = element("div");
			p0 = element("p");
			t1 = space();
			p1 = element("p");
			t2 = space();
			p2 = element("p");
			t3 = space();
			p3 = element("p");
			t4 = space();
			attr_dev(div0, "class", "placeholder img svelte-1bab5vg");
			add_location(div0, file, 52, 16, 1482);
			attr_dev(div1, "class", "left svelte-1bab5vg");
			add_location(div1, file, 51, 12, 1446);
			attr_dev(p0, "class", "placeholder author svelte-1bab5vg");
			add_location(p0, file, 55, 16, 1589);
			attr_dev(p1, "class", "placeholder article-title svelte-1bab5vg");
			add_location(p1, file, 56, 16, 1641);
			attr_dev(p2, "class", "placeholder article-title svelte-1bab5vg");
			add_location(p2, file, 57, 16, 1700);
			attr_dev(p3, "class", "placeholder article-title svelte-1bab5vg");
			add_location(p3, file, 58, 16, 1759);
			attr_dev(div2, "class", "credit svelte-1bab5vg");
			add_location(div2, file, 54, 12, 1551);
			attr_dev(div3, "class", "article svelte-1bab5vg");
			add_location(div3, file, 50, 8, 1411);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, div1);
			append_dev(div1, div0);
			append_dev(div3, t0);
			append_dev(div3, div2);
			append_dev(div2, p0);
			append_dev(div2, t1);
			append_dev(div2, p1);
			append_dev(div2, t2);
			append_dev(div2, p2);
			append_dev(div2, t3);
			append_dev(div2, p3);
			append_dev(div3, t4);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(50:8) {#each placeholder as d}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let head;
	let updating_height;
	let updating_colorBrandDarkBlue;
	let updating_colorBrandRed;
	let updating_colorBrandWhite;
	let t1;
	let article;
	let h1;
	let t3;
	let form;
	let input;
	let t4;
	let button;
	let t6;
	let promise;
	let current;
	let mounted;
	let dispose;

	function head_height_binding(value) {
		/*head_height_binding*/ ctx[8](value);
	}

	function head_colorBrandDarkBlue_binding(value) {
		/*head_colorBrandDarkBlue_binding*/ ctx[9](value);
	}

	function head_colorBrandRed_binding(value) {
		/*head_colorBrandRed_binding*/ ctx[10](value);
	}

	function head_colorBrandWhite_binding(value) {
		/*head_colorBrandWhite_binding*/ ctx[11](value);
	}

	let head_props = { page: "indeks" };

	if (/*height*/ ctx[3] !== void 0) {
		head_props.height = /*height*/ ctx[3];
	}

	if (/*colorBrandDarkBlue*/ ctx[0] !== void 0) {
		head_props.colorBrandDarkBlue = /*colorBrandDarkBlue*/ ctx[0];
	}

	if (/*colorBrandRed*/ ctx[1] !== void 0) {
		head_props.colorBrandRed = /*colorBrandRed*/ ctx[1];
	}

	if (/*colorBrandWhite*/ ctx[2] !== void 0) {
		head_props.colorBrandWhite = /*colorBrandWhite*/ ctx[2];
	}

	head = new Head({ props: head_props, $$inline: true });
	binding_callbacks.push(() => bind(head, 'height', head_height_binding));
	binding_callbacks.push(() => bind(head, 'colorBrandDarkBlue', head_colorBrandDarkBlue_binding));
	binding_callbacks.push(() => bind(head, 'colorBrandRed', head_colorBrandRed_binding));
	binding_callbacks.push(() => bind(head, 'colorBrandWhite', head_colorBrandWhite_binding));

	let info = {
		ctx,
		current: null,
		token: null,
		hasCatch: true,
		pending: create_pending_block,
		then: create_then_block,
		catch: create_catch_block,
		value: 18,
		error: 21
	};

	handle_promise(promise = /*dataPromise*/ ctx[5], info);

	const block = {
		c: function create() {
			t0 = space();
			create_component(head.$$.fragment);
			t1 = space();
			article = element("article");
			h1 = element("h1");
			h1.textContent = "REWARA";
			t3 = space();
			form = element("form");
			input = element("input");
			t4 = space();
			button = element("button");
			button.textContent = "Search";
			t6 = space();
			info.block.c();
			document.title = "Rewara - Indeks";
			attr_dev(h1, "class", "svelte-1bab5vg");
			add_location(h1, file, 43, 4, 1143);
			attr_dev(input, "type", "search");
			attr_dev(input, "placeholder", "Cari Artikel Rewara...");
			attr_dev(input, "class", "svelte-1bab5vg");
			add_location(input, file, 45, 8, 1180);
			attr_dev(button, "type", "submit");
			attr_dev(button, "class", "svelte-1bab5vg");
			add_location(button, file, 46, 8, 1273);
			attr_dev(form, "class", "svelte-1bab5vg");
			add_location(form, file, 44, 4, 1164);
			set_style(article, "margin-top", /*height*/ ctx[3] + "px");
			attr_dev(article, "class", "svelte-1bab5vg");
			add_location(article, file, 42, 0, 1098);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			mount_component(head, target, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, article, anchor);
			append_dev(article, h1);
			append_dev(article, t3);
			append_dev(article, form);
			append_dev(form, input);
			set_input_value(input, /*searchValue*/ ctx[4]);
			append_dev(form, t4);
			append_dev(form, button);
			append_dev(article, t6);
			info.block.m(article, info.anchor = null);
			info.mount = () => article;
			info.anchor = null;
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(input, "input", /*input_input_handler*/ ctx[12]),
					listen_dev(button, "click", /*search*/ ctx[7], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, [dirty]) {
			ctx = new_ctx;
			const head_changes = {};

			if (!updating_height && dirty & /*height*/ 8) {
				updating_height = true;
				head_changes.height = /*height*/ ctx[3];
				add_flush_callback(() => updating_height = false);
			}

			if (!updating_colorBrandDarkBlue && dirty & /*colorBrandDarkBlue*/ 1) {
				updating_colorBrandDarkBlue = true;
				head_changes.colorBrandDarkBlue = /*colorBrandDarkBlue*/ ctx[0];
				add_flush_callback(() => updating_colorBrandDarkBlue = false);
			}

			if (!updating_colorBrandRed && dirty & /*colorBrandRed*/ 2) {
				updating_colorBrandRed = true;
				head_changes.colorBrandRed = /*colorBrandRed*/ ctx[1];
				add_flush_callback(() => updating_colorBrandRed = false);
			}

			if (!updating_colorBrandWhite && dirty & /*colorBrandWhite*/ 4) {
				updating_colorBrandWhite = true;
				head_changes.colorBrandWhite = /*colorBrandWhite*/ ctx[2];
				add_flush_callback(() => updating_colorBrandWhite = false);
			}

			head.$set(head_changes);

			if (dirty & /*searchValue*/ 16) {
				set_input_value(input, /*searchValue*/ ctx[4]);
			}

			info.ctx = ctx;

			if (dirty & /*dataPromise*/ 32 && promise !== (promise = /*dataPromise*/ ctx[5]) && handle_promise(promise, info)) ; else {
				update_await_block_branch(info, ctx, dirty);
			}

			if (!current || dirty & /*height*/ 8) {
				set_style(article, "margin-top", /*height*/ ctx[3] + "px");
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(head.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(head.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			destroy_component(head, detaching);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(article);
			info.block.d();
			info.token = null;
			info = null;
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('IndeksRewara', slots, []);
	let { colorBrandDarkBlue, colorBrandRed, colorBrandWhite } = $$props;
	let height;
	let placeholder = [1, 2, 3, 4, 5, 6];
	let searchValue;

	const fetchData = async () => {
		const result = await get(URI_REWARA_LIST, { size: 10 });
		return await result.data;
	};

	const searchData = async () => {
		let searchResult = await get(URI_SEARCH, { keywords: searchValue, type: 'rewara' });
		return searchResult.data;
	};

	let dataPromise = fetchData();

	const search = () => {
		$$invalidate(5, dataPromise = searchData());
	};

	onMount(() => {
		scrollToTop();
	});

	const writable_props = ['colorBrandDarkBlue', 'colorBrandRed', 'colorBrandWhite'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<IndeksRewara> was created with unknown prop '${key}'`);
	});

	function head_height_binding(value) {
		height = value;
		$$invalidate(3, height);
	}

	function head_colorBrandDarkBlue_binding(value) {
		colorBrandDarkBlue = value;
		$$invalidate(0, colorBrandDarkBlue);
	}

	function head_colorBrandRed_binding(value) {
		colorBrandRed = value;
		$$invalidate(1, colorBrandRed);
	}

	function head_colorBrandWhite_binding(value) {
		colorBrandWhite = value;
		$$invalidate(2, colorBrandWhite);
	}

	function input_input_handler() {
		searchValue = this.value;
		$$invalidate(4, searchValue);
	}

	$$self.$$set = $$props => {
		if ('colorBrandDarkBlue' in $$props) $$invalidate(0, colorBrandDarkBlue = $$props.colorBrandDarkBlue);
		if ('colorBrandRed' in $$props) $$invalidate(1, colorBrandRed = $$props.colorBrandRed);
		if ('colorBrandWhite' in $$props) $$invalidate(2, colorBrandWhite = $$props.colorBrandWhite);
	};

	$$self.$capture_state = () => ({
		get,
		ihttp,
		Head,
		animateScroll,
		onMount,
		colorBrandDarkBlue,
		colorBrandRed,
		colorBrandWhite,
		height,
		placeholder,
		searchValue,
		fetchData,
		searchData,
		dataPromise,
		search
	});

	$$self.$inject_state = $$props => {
		if ('colorBrandDarkBlue' in $$props) $$invalidate(0, colorBrandDarkBlue = $$props.colorBrandDarkBlue);
		if ('colorBrandRed' in $$props) $$invalidate(1, colorBrandRed = $$props.colorBrandRed);
		if ('colorBrandWhite' in $$props) $$invalidate(2, colorBrandWhite = $$props.colorBrandWhite);
		if ('height' in $$props) $$invalidate(3, height = $$props.height);
		if ('placeholder' in $$props) $$invalidate(6, placeholder = $$props.placeholder);
		if ('searchValue' in $$props) $$invalidate(4, searchValue = $$props.searchValue);
		if ('dataPromise' in $$props) $$invalidate(5, dataPromise = $$props.dataPromise);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		colorBrandDarkBlue,
		colorBrandRed,
		colorBrandWhite,
		height,
		searchValue,
		dataPromise,
		placeholder,
		search,
		head_height_binding,
		head_colorBrandDarkBlue_binding,
		head_colorBrandRed_binding,
		head_colorBrandWhite_binding,
		input_input_handler
	];
}

class IndeksRewara extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			colorBrandDarkBlue: 0,
			colorBrandRed: 1,
			colorBrandWhite: 2
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "IndeksRewara",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*colorBrandDarkBlue*/ ctx[0] === undefined && !('colorBrandDarkBlue' in props)) {
			console.warn("<IndeksRewara> was created without expected prop 'colorBrandDarkBlue'");
		}

		if (/*colorBrandRed*/ ctx[1] === undefined && !('colorBrandRed' in props)) {
			console.warn("<IndeksRewara> was created without expected prop 'colorBrandRed'");
		}

		if (/*colorBrandWhite*/ ctx[2] === undefined && !('colorBrandWhite' in props)) {
			console.warn("<IndeksRewara> was created without expected prop 'colorBrandWhite'");
		}
	}

	get colorBrandDarkBlue() {
		throw new Error("<IndeksRewara>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set colorBrandDarkBlue(value) {
		throw new Error("<IndeksRewara>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get colorBrandRed() {
		throw new Error("<IndeksRewara>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set colorBrandRed(value) {
		throw new Error("<IndeksRewara>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get colorBrandWhite() {
		throw new Error("<IndeksRewara>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set colorBrandWhite(value) {
		throw new Error("<IndeksRewara>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { IndeksRewara as default };
//# sourceMappingURL=IndeksRewara-fa88058b.js.map

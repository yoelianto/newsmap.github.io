
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, o as binding_callbacks, p as bind, v as validate_slots, a7 as afterUpdate, u as get, w as ihttp, b as space, e as element, A as create_component, f as attr_dev, c as add_location, g as set_style, h as insert_dev, B as mount_component, j as append_dev, C as add_flush_callback, E as transition_in, G as transition_out, l as detach_dev, H as destroy_component, U as URI_SETTING, T as globals } from './main-477e1cc7.js';
import { H as Head } from './Head-bc165711.js';
import { F as Footer } from './Footer-06c38500.js';
import { a as animateScroll, s as scrollToTop } from './index-bc0e1ad4.js';
import './Router-29db7ec6.js';

/* src\pages\deduktif\redaksi.svelte generated by Svelte v3.46.4 */

const { document: document_1 } = globals;
const file = "src\\pages\\deduktif\\redaksi.svelte";

function create_fragment(ctx) {
	let t0;
	let main;
	let head;
	let updating_height;
	let updating_page;
	let t1;
	let div1;
	let h1;
	let t3;
	let div0;
	let br0;
	let t4;
	let h30;
	let strong0;
	let t6;
	let p0;
	let t8;
	let br1;
	let t9;
	let h31;
	let strong1;
	let t11;
	let p1;
	let t13;
	let p2;
	let t15;
	let br2;
	let t16;
	let h32;
	let strong2;
	let t18;
	let p3;
	let t20;
	let br3;
	let t21;
	let h33;
	let strong3;
	let t23;
	let p4;
	let t25;
	let p5;
	let t27;
	let footer;
	let div;
	let updating_page_1;
	let current;

	function head_height_binding(value) {
		/*head_height_binding*/ ctx[2](value);
	}

	function head_page_binding(value) {
		/*head_page_binding*/ ctx[3](value);
	}

	let head_props = {};

	if (/*height*/ ctx[0] !== void 0) {
		head_props.height = /*height*/ ctx[0];
	}

	if (/*page*/ ctx[1] !== void 0) {
		head_props.page = /*page*/ ctx[1];
	}

	head = new Head({ props: head_props, $$inline: true });
	binding_callbacks.push(() => bind(head, 'height', head_height_binding));
	binding_callbacks.push(() => bind(head, 'page', head_page_binding));

	function footer_page_binding(value) {
		/*footer_page_binding*/ ctx[4](value);
	}

	let footer_props = {};

	if (/*page*/ ctx[1] !== void 0) {
		footer_props.page = /*page*/ ctx[1];
	}

	footer = new Footer({ props: footer_props, $$inline: true });
	binding_callbacks.push(() => bind(footer, 'page', footer_page_binding));

	const block = {
		c: function create() {
			t0 = space();
			main = element("main");
			create_component(head.$$.fragment);
			t1 = space();
			div1 = element("div");
			h1 = element("h1");
			h1.textContent = "Redaksi Deduktif";
			t3 = space();
			div0 = element("div");
			br0 = element("br");
			t4 = space();
			h30 = element("h3");
			strong0 = element("strong");
			strong0.textContent = "Pemimpin Redaksi";
			t6 = space();
			p0 = element("p");
			p0.textContent = "Sapto Anggoro";
			t8 = space();
			br1 = element("br");
			t9 = space();
			h31 = element("h3");
			strong1 = element("strong");
			strong1.textContent = "Dewan Redaksi";
			t11 = space();
			p1 = element("p");
			p1.textContent = "Teguh Budi Santoso";
			t13 = space();
			p2 = element("p");
			p2.textContent = "Nurul Qomariyah";
			t15 = space();
			br2 = element("br");
			t16 = space();
			h32 = element("h3");
			strong2 = element("strong");
			strong2.textContent = "Redaktur";
			t18 = space();
			p3 = element("p");
			p3.textContent = "Nurul Qomariyah";
			t20 = space();
			br3 = element("br");
			t21 = space();
			h33 = element("h3");
			strong3 = element("strong");
			strong3.textContent = "Redaksi";
			t23 = space();
			p4 = element("p");
			p4.textContent = "Fajar Regal";
			t25 = space();
			p5 = element("p");
			p5.textContent = "Ahsan Ridhoi";
			t27 = space();
			div = element("div");
			create_component(footer.$$.fragment);
			document_1.title = "Redaksi Deduktif";
			attr_dev(h1, "class", "svelte-1hc36yd");
			add_location(h1, file, 39, 4, 946);
			add_location(br0, file, 42, 8, 1010);
			add_location(strong0, file, 43, 12, 1028);
			attr_dev(h30, "class", "svelte-1hc36yd");
			add_location(h30, file, 43, 8, 1024);
			attr_dev(p0, "class", "svelte-1hc36yd");
			add_location(p0, file, 44, 8, 1076);
			add_location(br1, file, 45, 8, 1106);
			add_location(strong1, file, 46, 12, 1124);
			attr_dev(h31, "class", "svelte-1hc36yd");
			add_location(h31, file, 46, 8, 1120);
			attr_dev(p1, "class", "svelte-1hc36yd");
			add_location(p1, file, 47, 8, 1169);
			attr_dev(p2, "class", "svelte-1hc36yd");
			add_location(p2, file, 48, 8, 1204);
			add_location(br2, file, 49, 8, 1236);
			add_location(strong2, file, 50, 12, 1254);
			attr_dev(h32, "class", "svelte-1hc36yd");
			add_location(h32, file, 50, 8, 1250);
			attr_dev(p3, "class", "svelte-1hc36yd");
			add_location(p3, file, 51, 8, 1294);
			add_location(br3, file, 52, 8, 1326);
			add_location(strong3, file, 53, 12, 1344);
			attr_dev(h33, "class", "svelte-1hc36yd");
			add_location(h33, file, 53, 8, 1340);
			attr_dev(p4, "class", "svelte-1hc36yd");
			add_location(p4, file, 54, 8, 1383);
			attr_dev(p5, "class", "svelte-1hc36yd");
			add_location(p5, file, 55, 8, 1411);
			attr_dev(div0, "class", "content svelte-1hc36yd");
			add_location(div0, file, 41, 4, 979);
			attr_dev(div1, "class", "container svelte-1hc36yd");
			set_style(div1, "margin-top", /*height*/ ctx[0] + "px");
			add_location(div1, file, 37, 0, 885);
			set_style(div, "display", "contents");
			set_style(div, "--color-brand-dark-blue", "#242053");
			set_style(div, "--color-brand-white", "#fafafa");
			set_style(div, "--fontfamily2", "Roboto");
			attr_dev(main, "class", "svelte-1hc36yd");
			add_location(main, file, 31, 0, 816);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, main, anchor);
			mount_component(head, main, null);
			append_dev(main, t1);
			append_dev(main, div1);
			append_dev(div1, h1);
			append_dev(div1, t3);
			append_dev(div1, div0);
			append_dev(div0, br0);
			append_dev(div0, t4);
			append_dev(div0, h30);
			append_dev(h30, strong0);
			append_dev(div0, t6);
			append_dev(div0, p0);
			append_dev(div0, t8);
			append_dev(div0, br1);
			append_dev(div0, t9);
			append_dev(div0, h31);
			append_dev(h31, strong1);
			append_dev(div0, t11);
			append_dev(div0, p1);
			append_dev(div0, t13);
			append_dev(div0, p2);
			append_dev(div0, t15);
			append_dev(div0, br2);
			append_dev(div0, t16);
			append_dev(div0, h32);
			append_dev(h32, strong2);
			append_dev(div0, t18);
			append_dev(div0, p3);
			append_dev(div0, t20);
			append_dev(div0, br3);
			append_dev(div0, t21);
			append_dev(div0, h33);
			append_dev(h33, strong3);
			append_dev(div0, t23);
			append_dev(div0, p4);
			append_dev(div0, t25);
			append_dev(div0, p5);
			append_dev(main, t27);
			append_dev(main, div);
			mount_component(footer, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const head_changes = {};

			if (!updating_height && dirty & /*height*/ 1) {
				updating_height = true;
				head_changes.height = /*height*/ ctx[0];
				add_flush_callback(() => updating_height = false);
			}

			if (!updating_page && dirty & /*page*/ 2) {
				updating_page = true;
				head_changes.page = /*page*/ ctx[1];
				add_flush_callback(() => updating_page = false);
			}

			head.$set(head_changes);

			if (!current || dirty & /*height*/ 1) {
				set_style(div1, "margin-top", /*height*/ ctx[0] + "px");
			}

			const footer_changes = {};

			if (!updating_page_1 && dirty & /*page*/ 2) {
				updating_page_1 = true;
				footer_changes.page = /*page*/ ctx[1];
				add_flush_callback(() => updating_page_1 = false);
			}

			footer.$set(footer_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(head.$$.fragment, local);
			transition_in(footer.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(head.$$.fragment, local);
			transition_out(footer.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(main);
			destroy_component(head);
			destroy_component(footer);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Redaksi', slots, []);

	const fetchData = async () => {
		const result = await get(URI_SETTING, { group: 'redaksi' });
		return await result;
	};

	let height;
	let page = 'indeksdeduktif';

	afterUpdate(() => {
		for (const element of document.body.querySelectorAll('main')) {
			if (element.nextElementSibling) {
				element.nextElementSibling.remove();
			}
		}

		scrollToTop();
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Redaksi> was created with unknown prop '${key}'`);
	});

	function head_height_binding(value) {
		height = value;
		$$invalidate(0, height);
	}

	function head_page_binding(value) {
		page = value;
		$$invalidate(1, page);
	}

	function footer_page_binding(value) {
		page = value;
		$$invalidate(1, page);
	}

	$$self.$capture_state = () => ({
		get,
		ihttp,
		Head,
		Footer,
		afterUpdate,
		animateScroll,
		fetchData,
		height,
		page
	});

	$$self.$inject_state = $$props => {
		if ('height' in $$props) $$invalidate(0, height = $$props.height);
		if ('page' in $$props) $$invalidate(1, page = $$props.page);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [height, page, head_height_binding, head_page_binding, footer_page_binding];
}

class Redaksi extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Redaksi",
			options,
			id: create_fragment.name
		});
	}
}

export { Redaksi as default };
//# sourceMappingURL=redaksi-b1547591.js.map

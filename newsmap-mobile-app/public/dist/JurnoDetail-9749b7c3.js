
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, q as handle_promise, v as validate_slots, a4 as onMount, u as get, w as ihttp, F as Fa, x as faSpinner, y as faAngleLeft, z as faAngleRight, I as empty, h as insert_dev, D as update_await_block_branch, E as transition_in, G as transition_out, l as detach_dev, ad as URI_ARTICLE_DETAIL, o as binding_callbacks, p as bind, ae as URI_ARTICLE_LIST, e as element, c as add_location, n as noop, A as create_component, b as space, B as mount_component, C as add_flush_callback, H as destroy_component, f as attr_dev } from './main-1d28085c.js';
import ArticleDetail from './ArticleDetail-850393d2.js';
import { H as Head } from './Head-9bde3955.js';
import { a as animateScroll, s as scrollToTop } from './index-b6dab8e7.js';
import { S as Share } from './Share-8a3d0948.js';
import './moment-ffd3e3a3.js';
import './Router-3cee6396.js';

/* src\pages\JurnoDetail.svelte generated by Svelte v3.46.4 */

const file = "src\\pages\\JurnoDetail.svelte";

// (61:0) {:catch error}
function create_catch_block(ctx) {
	let p;

	const block = {
		c: function create() {
			p = element("p");
			p.textContent = "An error occurred!";
			add_location(p, file, 61, 4, 2151);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_catch_block.name,
		type: "catch",
		source: "(61:0) {:catch error}",
		ctx
	});

	return block;
}

// (39:0) {:then data}
function create_then_block(ctx) {
	let head;
	let updating_height;
	let updating_page;
	let t0;
	let share;
	let updating_url;
	let updating_title;
	let t1;
	let articledetail;
	let current;

	function head_height_binding(value) {
		/*head_height_binding*/ ctx[6](value);
	}

	function head_page_binding(value) {
		/*head_page_binding*/ ctx[7](value);
	}

	let head_props = {};

	if (/*height*/ ctx[2] !== void 0) {
		head_props.height = /*height*/ ctx[2];
	}

	if (/*page*/ ctx[3] !== void 0) {
		head_props.page = /*page*/ ctx[3];
	}

	head = new Head({ props: head_props, $$inline: true });
	binding_callbacks.push(() => bind(head, 'height', head_height_binding));
	binding_callbacks.push(() => bind(head, 'page', head_page_binding));

	function share_url_binding(value) {
		/*share_url_binding*/ ctx[8](value);
	}

	function share_title_binding(value) {
		/*share_title_binding*/ ctx[9](value);
	}

	let share_props = {};

	if (/*url*/ ctx[0] !== void 0) {
		share_props.url = /*url*/ ctx[0];
	}

	if (/*title*/ ctx[1] !== void 0) {
		share_props.title = /*title*/ ctx[1];
	}

	share = new Share({ props: share_props, $$inline: true });
	binding_callbacks.push(() => bind(share, 'url', share_url_binding));
	binding_callbacks.push(() => bind(share, 'title', share_title_binding));

	articledetail = new ArticleDetail({
			props: {
				data: {
					.../*data*/ ctx[12],
					type,
					footer: {
						uri: URI_ARTICLE_LIST,
						params: { except: /*data*/ ctx[12].id, size: 3 },
						thumbnailFolder: "article"
					},
					thumbnail: ({
						"env": {
							"DOMAIN": "https://admin-dev.jurno.id/",
							"URL_API": "https://api-dev.jurno.id/api/newsmap/v1/",
							"URL_IMAGE": "https://admin-dev.newsmap.id/uploads/",
							"URL_CUSTOM_HTML": "https://admin-dev.newsmap.id/files/",
							"NO_IMAGE": "./image/logo-jurno-web.svg",
							"isProd": false
						}
					})["env"]["URL_IMAGE"] + type + "/" + /*data*/ ctx[12].thumbnail,
					thumbnail_social: /*data*/ ctx[12].thumbnail_social === undefined
					? ''
					: ({
							"env": {
								"DOMAIN": "https://admin-dev.jurno.id/",
								"URL_API": "https://api-dev.jurno.id/api/newsmap/v1/",
								"URL_IMAGE": "https://admin-dev.newsmap.id/uploads/",
								"URL_CUSTOM_HTML": "https://admin-dev.newsmap.id/files/",
								"NO_IMAGE": "./image/logo-jurno-web.svg",
								"isProd": false
							}
						})["env"]["URL_IMAGE"] + type + "/" + /*data*/ ctx[12].thumbnail_social
				}
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(head.$$.fragment);
			t0 = space();
			create_component(share.$$.fragment);
			t1 = space();
			create_component(articledetail.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(head, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(share, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(articledetail, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const head_changes = {};

			if (!updating_height && dirty & /*height*/ 4) {
				updating_height = true;
				head_changes.height = /*height*/ ctx[2];
				add_flush_callback(() => updating_height = false);
			}

			if (!updating_page && dirty & /*page*/ 8) {
				updating_page = true;
				head_changes.page = /*page*/ ctx[3];
				add_flush_callback(() => updating_page = false);
			}

			head.$set(head_changes);
			const share_changes = {};

			if (!updating_url && dirty & /*url*/ 1) {
				updating_url = true;
				share_changes.url = /*url*/ ctx[0];
				add_flush_callback(() => updating_url = false);
			}

			if (!updating_title && dirty & /*title*/ 2) {
				updating_title = true;
				share_changes.title = /*title*/ ctx[1];
				add_flush_callback(() => updating_title = false);
			}

			share.$set(share_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(head.$$.fragment, local);
			transition_in(share.$$.fragment, local);
			transition_in(articledetail.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(head.$$.fragment, local);
			transition_out(share.$$.fragment, local);
			transition_out(articledetail.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(head, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(share, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(articledetail, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_then_block.name,
		type: "then",
		source: "(39:0) {:then data}",
		ctx
	});

	return block;
}

// (35:20)      <div class="placeholder-container">         <Fa icon={faSpinner}
function create_pending_block(ctx) {
	let div;
	let fa;
	let current;

	fa = new Fa({
			props: { icon: faSpinner, size: "3x", pulse: true },
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(fa.$$.fragment);
			attr_dev(div, "class", "placeholder-container svelte-z7hrh9");
			add_location(div, file, 35, 4, 979);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(fa, div, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(fa.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(fa.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(fa);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_pending_block.name,
		type: "pending",
		source: "(35:20)      <div class=\\\"placeholder-container\\\">         <Fa icon={faSpinner}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let await_block_anchor;
	let current;

	let info = {
		ctx,
		current: null,
		token: null,
		hasCatch: true,
		pending: create_pending_block,
		then: create_then_block,
		catch: create_catch_block,
		value: 12,
		error: 13,
		blocks: [,,,]
	};

	handle_promise(/*fetchData*/ ctx[4](), info);

	const block = {
		c: function create() {
			await_block_anchor = empty();
			info.block.c();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, await_block_anchor, anchor);
			info.block.m(target, info.anchor = anchor);
			info.mount = () => await_block_anchor.parentNode;
			info.anchor = await_block_anchor;
			current = true;
		},
		p: function update(new_ctx, [dirty]) {
			ctx = new_ctx;
			update_await_block_branch(info, ctx, dirty);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(info.block);
			current = true;
		},
		o: function outro(local) {
			for (let i = 0; i < 3; i += 1) {
				const block = info.blocks[i];
				transition_out(block);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(await_block_anchor);
			info.block.d(detaching);
			info.token = null;
			info = null;
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const type = "article";

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('JurnoDetail', slots, []);
	let { params = {} } = $$props;
	const slug = params.slug;
	let url, title;

	const fetchData = async () => {
		const result = await get(`${URI_ARTICLE_DETAIL}/${slug}`);
		return await result;
	};

	let height;
	let page = 'artikel';
	url = document.location.href;
	let urlReplace = url.replace('#/', '');

	onMount(() => {
		scrollToTop();
	});

	const writable_props = ['params'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<JurnoDetail> was created with unknown prop '${key}'`);
	});

	function head_height_binding(value) {
		height = value;
		$$invalidate(2, height);
	}

	function head_page_binding(value) {
		page = value;
		$$invalidate(3, page);
	}

	function share_url_binding(value) {
		url = value;
		$$invalidate(0, url);
	}

	function share_title_binding(value) {
		title = value;
		$$invalidate(1, title);
	}

	$$self.$$set = $$props => {
		if ('params' in $$props) $$invalidate(5, params = $$props.params);
	};

	$$self.$capture_state = () => ({
		get,
		ihttp,
		ArticleDetail,
		Head,
		animateScroll,
		onMount,
		Share,
		Fa,
		faSpinner,
		faAngleLeft,
		faAngleRight,
		params,
		slug,
		type,
		url,
		title,
		fetchData,
		height,
		page,
		urlReplace
	});

	$$self.$inject_state = $$props => {
		if ('params' in $$props) $$invalidate(5, params = $$props.params);
		if ('url' in $$props) $$invalidate(0, url = $$props.url);
		if ('title' in $$props) $$invalidate(1, title = $$props.title);
		if ('height' in $$props) $$invalidate(2, height = $$props.height);
		if ('page' in $$props) $$invalidate(3, page = $$props.page);
		if ('urlReplace' in $$props) urlReplace = $$props.urlReplace;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	(fetchData().then(data => {
		return $$invalidate(1, title = data.title);
	}));

	return [
		url,
		title,
		height,
		page,
		fetchData,
		params,
		head_height_binding,
		head_page_binding,
		share_url_binding,
		share_title_binding
	];
}

class JurnoDetail extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { params: 5 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "JurnoDetail",
			options,
			id: create_fragment.name
		});
	}

	get params() {
		throw new Error("<JurnoDetail>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set params(value) {
		throw new Error("<JurnoDetail>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { JurnoDetail as default };
//# sourceMappingURL=JurnoDetail-9749b7c3.js.map

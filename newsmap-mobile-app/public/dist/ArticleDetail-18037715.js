
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, q as handle_promise, v as validate_slots, u as get, F as Fa, x as faSpinner, y as faAngleLeft, z as faAngleRight, e as element, t as text, b as space, f as attr_dev, g as set_style, c as add_location, h as insert_dev, j as append_dev, D as update_await_block_branch, E as transition_in, G as transition_out, l as detach_dev, X as validate_each_argument, a3 as src_url_equal, n as noop, I as empty, Y as destroy_each, A as create_component, B as mount_component, H as destroy_component, a1 as add_render_callback, af as stringToDom, a7 as afterUpdate, T as globals, Z as listen_dev, W as check_outros, a6 as set_data_dev, V as group_outros, K as assign, M as get_spread_update, ag as get_spread_object } from './main-477e1cc7.js';
import { m as moment } from './moment-ffd3e3a3.js';
import { H as Head } from './Head-bc165711.js';
import './Router-29db7ec6.js';

/* src\Foot.svelte generated by Svelte v3.46.4 */

const file$1 = "src\\Foot.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[8] = list[i];
	return child_ctx;
}

// (50:16) {:catch error}
function create_catch_block(ctx) {
	let p;

	const block = {
		c: function create() {
			p = element("p");
			p.textContent = "An error occurred!";
			add_location(p, file$1, 50, 20, 2452);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_catch_block.name,
		type: "catch",
		source: "(50:16) {:catch error}",
		ctx
	});

	return block;
}

// (30:16) {:then data}
function create_then_block(ctx) {
	let each_1_anchor;
	let each_value = /*data*/ ctx[7];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*type, fetchData, txtFooter, thumbnailFolder*/ 27) {
				each_value = /*data*/ ctx[7];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_then_block.name,
		type: "then",
		source: "(30:16) {:then data}",
		ctx
	});

	return block;
}

// (31:20) {#each data as d}
function create_each_block(ctx) {
	let a;
	let div2;
	let div0;
	let img;
	let img_src_value;
	let t0;
	let div1;
	let p0;
	let t1_value = /*d*/ ctx[8].author_name + "";
	let t1;
	let t2;
	let p1;
	let t3_value = /*d*/ ctx[8].title + "";
	let t3;
	let t4;
	let a_href_value;

	const block = {
		c: function create() {
			a = element("a");
			div2 = element("div");
			div0 = element("div");
			img = element("img");
			t0 = space();
			div1 = element("div");
			p0 = element("p");
			t1 = text(t1_value);
			t2 = space();
			p1 = element("p");
			t3 = text(t3_value);
			t4 = space();
			attr_dev(img, "class", "imgthumb svelte-1xybi6u");

			if (!src_url_equal(img.src, img_src_value = `${({
				"env": {
					"DOMAIN": "https://admin-dev.jurno.id/",
					"URL_API": "https://api-dev.jurno.id/api/newsmap/v1/",
					"URL_IMAGE": "https://admin-dev.newsmap.id/uploads/",
					"URL_CUSTOM_HTML": "https://admin-dev.newsmap.id/files/",
					"NO_IMAGE": "./image/logo-jurno-web.svg",
					"isProd": false
				}
			})["env"]["URL_IMAGE"]}images/${/*thumbnailFolder*/ ctx[1]}/${/*d*/ ctx[8].thumbnail}`)) attr_dev(img, "src", img_src_value);

			attr_dev(img, "title", /*d*/ ctx[8].title);
			attr_dev(img, "alt", /*d*/ ctx[8].title);

			attr_dev(img, "onerror", `this.onerror=null;this.src='${({
				"env": {
					"DOMAIN": "https://admin-dev.jurno.id/",
					"URL_API": "https://api-dev.jurno.id/api/newsmap/v1/",
					"URL_IMAGE": "https://admin-dev.newsmap.id/uploads/",
					"URL_CUSTOM_HTML": "https://admin-dev.newsmap.id/files/",
					"NO_IMAGE": "./image/logo-jurno-web.svg",
					"isProd": false
				}
			})['env']['NO_IMAGE']}';`);

			add_location(img, file$1, 35, 32, 1171);
			attr_dev(div0, "class", "images svelte-1xybi6u");
			add_location(div0, file$1, 33, 28, 1074);
			attr_dev(p0, "class", "author svelte-1xybi6u");
			add_location(p0, file$1, 41, 32, 2061);
			attr_dev(p1, "class", "article-title svelte-1xybi6u");
			add_location(p1, file$1, 42, 32, 2165);
			attr_dev(div1, "class", "credit svelte-1xybi6u");
			set_style(div1, "color", "#" + /*txtFooter*/ ctx[3]);
			add_location(div1, file$1, 40, 28, 1979);
			attr_dev(div2, "class", "news svelte-1xybi6u");
			add_location(div2, file$1, 32, 24, 1026);
			attr_dev(a, "href", a_href_value = `/${/*type*/ ctx[0]}/${/*d*/ ctx[8].slug}/`);
			attr_dev(a, "class", "newspart svelte-1xybi6u");
			add_location(a, file$1, 31, 20, 951);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, div2);
			append_dev(div2, div0);
			append_dev(div0, img);
			append_dev(div2, t0);
			append_dev(div2, div1);
			append_dev(div1, p0);
			append_dev(p0, t1);
			append_dev(div1, t2);
			append_dev(div1, p1);
			append_dev(p1, t3);
			append_dev(a, t4);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*thumbnailFolder*/ 2 && !src_url_equal(img.src, img_src_value = `${({
				"env": {
					"DOMAIN": "https://admin-dev.jurno.id/",
					"URL_API": "https://api-dev.jurno.id/api/newsmap/v1/",
					"URL_IMAGE": "https://admin-dev.newsmap.id/uploads/",
					"URL_CUSTOM_HTML": "https://admin-dev.newsmap.id/files/",
					"NO_IMAGE": "./image/logo-jurno-web.svg",
					"isProd": false
				}
			})["env"]["URL_IMAGE"]}images/${/*thumbnailFolder*/ ctx[1]}/${/*d*/ ctx[8].thumbnail}`)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*txtFooter*/ 8) {
				set_style(div1, "color", "#" + /*txtFooter*/ ctx[3]);
			}

			if (dirty & /*type*/ 1 && a_href_value !== (a_href_value = `/${/*type*/ ctx[0]}/${/*d*/ ctx[8].slug}/`)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(31:20) {#each data as d}",
		ctx
	});

	return block;
}

// (26:36)                   <div class="placeholder-container">                      <Fa icon={faSpinner}
function create_pending_block(ctx) {
	let div;
	let fa;
	let current;

	fa = new Fa({
			props: { icon: faSpinner, size: "3x", pulse: true },
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(fa.$$.fragment);
			attr_dev(div, "class", "placeholder-container svelte-1xybi6u");
			add_location(div, file$1, 26, 16, 740);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(fa, div, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(fa.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(fa.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(fa);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_pending_block.name,
		type: "pending",
		source: "(26:36)                   <div class=\\\"placeholder-container\\\">                      <Fa icon={faSpinner}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let nav;
	let div1;
	let p;
	let t0;
	let t1;
	let div0;
	let current;

	let info = {
		ctx,
		current: null,
		token: null,
		hasCatch: true,
		pending: create_pending_block,
		then: create_then_block,
		catch: create_catch_block,
		value: 7,
		error: 11,
		blocks: [,,,]
	};

	handle_promise(/*fetchData*/ ctx[4](), info);

	const block = {
		c: function create() {
			nav = element("nav");
			div1 = element("div");
			p = element("p");
			t0 = text("Artikel Lainnya");
			t1 = space();
			div0 = element("div");
			info.block.c();
			attr_dev(p, "class", "title svelte-1xybi6u");
			set_style(p, "color", "#" + /*txtFooter*/ ctx[3]);
			add_location(p, file$1, 23, 8, 581);
			attr_dev(div0, "class", "slider-container svelte-1xybi6u");
			add_location(div0, file$1, 24, 8, 654);
			attr_dev(div1, "class", "container svelte-1xybi6u");
			add_location(div1, file$1, 22, 4, 548);
			attr_dev(nav, "class", "footer svelte-1xybi6u");
			set_style(nav, "background-color", "#" + /*bgFooter*/ ctx[2]);
			add_location(nav, file$1, 21, 0, 485);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, nav, anchor);
			append_dev(nav, div1);
			append_dev(div1, p);
			append_dev(p, t0);
			append_dev(div1, t1);
			append_dev(div1, div0);
			info.block.m(div0, info.anchor = null);
			info.mount = () => div0;
			info.anchor = null;
			current = true;
		},
		p: function update(new_ctx, [dirty]) {
			ctx = new_ctx;

			if (!current || dirty & /*txtFooter*/ 8) {
				set_style(p, "color", "#" + /*txtFooter*/ ctx[3]);
			}

			update_await_block_branch(info, ctx, dirty);

			if (!current || dirty & /*bgFooter*/ 4) {
				set_style(nav, "background-color", "#" + /*bgFooter*/ ctx[2]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(info.block);
			current = true;
		},
		o: function outro(local) {
			for (let i = 0; i < 3; i += 1) {
				const block = info.blocks[i];
				transition_out(block);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(nav);
			info.block.d();
			info.token = null;
			info = null;
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Foot', slots, []);
	let { uri = null } = $$props;
	let { params = {} } = $$props;
	let { type = null } = $$props;
	let { thumbnailFolder = "" } = $$props;
	let { bgFooter, txtFooter } = $$props;

	const fetchData = async () => {
		const result = await get(uri, params);
		return await result.data;
	};

	const writable_props = ['uri', 'params', 'type', 'thumbnailFolder', 'bgFooter', 'txtFooter'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Foot> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('uri' in $$props) $$invalidate(5, uri = $$props.uri);
		if ('params' in $$props) $$invalidate(6, params = $$props.params);
		if ('type' in $$props) $$invalidate(0, type = $$props.type);
		if ('thumbnailFolder' in $$props) $$invalidate(1, thumbnailFolder = $$props.thumbnailFolder);
		if ('bgFooter' in $$props) $$invalidate(2, bgFooter = $$props.bgFooter);
		if ('txtFooter' in $$props) $$invalidate(3, txtFooter = $$props.txtFooter);
	};

	$$self.$capture_state = () => ({
		get,
		Fa,
		faSpinner,
		faAngleLeft,
		faAngleRight,
		uri,
		params,
		type,
		thumbnailFolder,
		bgFooter,
		txtFooter,
		fetchData
	});

	$$self.$inject_state = $$props => {
		if ('uri' in $$props) $$invalidate(5, uri = $$props.uri);
		if ('params' in $$props) $$invalidate(6, params = $$props.params);
		if ('type' in $$props) $$invalidate(0, type = $$props.type);
		if ('thumbnailFolder' in $$props) $$invalidate(1, thumbnailFolder = $$props.thumbnailFolder);
		if ('bgFooter' in $$props) $$invalidate(2, bgFooter = $$props.bgFooter);
		if ('txtFooter' in $$props) $$invalidate(3, txtFooter = $$props.txtFooter);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [type, thumbnailFolder, bgFooter, txtFooter, fetchData, uri, params];
}

class Foot extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			uri: 5,
			params: 6,
			type: 0,
			thumbnailFolder: 1,
			bgFooter: 2,
			txtFooter: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Foot",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*bgFooter*/ ctx[2] === undefined && !('bgFooter' in props)) {
			console.warn("<Foot> was created without expected prop 'bgFooter'");
		}

		if (/*txtFooter*/ ctx[3] === undefined && !('txtFooter' in props)) {
			console.warn("<Foot> was created without expected prop 'txtFooter'");
		}
	}

	get uri() {
		throw new Error("<Foot>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set uri(value) {
		throw new Error("<Foot>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get params() {
		throw new Error("<Foot>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set params(value) {
		throw new Error("<Foot>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get type() {
		throw new Error("<Foot>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<Foot>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get thumbnailFolder() {
		throw new Error("<Foot>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set thumbnailFolder(value) {
		throw new Error("<Foot>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get bgFooter() {
		throw new Error("<Foot>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set bgFooter(value) {
		throw new Error("<Foot>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get txtFooter() {
		throw new Error("<Foot>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set txtFooter(value) {
		throw new Error("<Foot>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src\pages\ArticleDetail.svelte generated by Svelte v3.46.4 */

const { document: document_1, setTimeout: setTimeout_1 } = globals;
const file = "src\\pages\\ArticleDetail.svelte";

// (29:4) {#if data.is_custom_html}
function create_if_block_10(ctx) {
	let link0;
	let link0_href_value;
	let t0;
	let link1;
	let link1_href_value;
	let t1;
	let script;
	let script_src_value;

	const block = {
		c: function create() {
			link0 = element("link");
			t0 = space();
			link1 = element("link");
			t1 = space();
			script = element("script");
			attr_dev(link0, "rel", "stylesheet");
			attr_dev(link0, "href", link0_href_value = `./${/*data*/ ctx[0].type}/${/*data*/ ctx[0].slug}/global.css`);
			add_location(link0, file, 29, 8, 694);
			attr_dev(link1, "rel", "stylesheet");
			attr_dev(link1, "href", link1_href_value = `./${/*data*/ ctx[0].type}/${/*data*/ ctx[0].slug}/bundle.css`);
			add_location(link1, file, 30, 8, 776);
			if (!src_url_equal(script.src, script_src_value = `./${/*data*/ ctx[0].type}/${/*data*/ ctx[0].slug}/bundle.js`)) attr_dev(script, "src", script_src_value);
			add_location(script, file, 31, 8, 858);
		},
		m: function mount(target, anchor) {
			insert_dev(target, link0, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, link1, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, script, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*data*/ 1 && link0_href_value !== (link0_href_value = `./${/*data*/ ctx[0].type}/${/*data*/ ctx[0].slug}/global.css`)) {
				attr_dev(link0, "href", link0_href_value);
			}

			if (dirty & /*data*/ 1 && link1_href_value !== (link1_href_value = `./${/*data*/ ctx[0].type}/${/*data*/ ctx[0].slug}/bundle.css`)) {
				attr_dev(link1, "href", link1_href_value);
			}

			if (dirty & /*data*/ 1 && !src_url_equal(script.src, script_src_value = `./${/*data*/ ctx[0].type}/${/*data*/ ctx[0].slug}/bundle.js`)) {
				attr_dev(script, "src", script_src_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(link0);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(link1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(script);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_10.name,
		type: "if",
		source: "(29:4) {#if data.is_custom_html}",
		ctx
	});

	return block;
}

// (172:0) {:else}
function create_else_block(ctx) {
	let main;
	let div;
	let show_if_3 = /*format*/ ctx[3](/*data*/ ctx[0].thumbnail);
	let t0;
	let show_if_2 = /*format*/ ctx[3](/*data*/ ctx[0].video);
	let t1;
	let show_if_1 = /*format*/ ctx[3](/*data*/ ctx[0].article);
	let t2;
	let show_if = /*format*/ ctx[3](/*data*/ ctx[0].source_link);
	let current;
	let if_block0 = show_if_3 && create_if_block_9(ctx);
	let if_block1 = show_if_2 && create_if_block_8(ctx);
	let if_block2 = show_if_1 && create_if_block_3(ctx);
	let if_block3 = show_if && create_if_block_2(ctx);

	const block = {
		c: function create() {
			main = element("main");
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			t2 = space();
			if (if_block3) if_block3.c();
			attr_dev(div, "class", "container svelte-183d3z7");
			add_location(div, file, 173, 8, 4619);
			attr_dev(main, "class", "content-section svelte-183d3z7");
			add_location(main, file, 172, 4, 4580);
		},
		m: function mount(target, anchor) {
			insert_dev(target, main, anchor);
			append_dev(main, div);
			if (if_block0) if_block0.m(div, null);
			append_dev(div, t0);
			if (if_block1) if_block1.m(div, null);
			append_dev(div, t1);
			if (if_block2) if_block2.m(div, null);
			append_dev(div, t2);
			if (if_block3) if_block3.m(div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*data*/ 1) show_if_3 = /*format*/ ctx[3](/*data*/ ctx[0].thumbnail);

			if (show_if_3) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_9(ctx);
					if_block0.c();
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*data*/ 1) show_if_2 = /*format*/ ctx[3](/*data*/ ctx[0].video);

			if (show_if_2) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_8(ctx);
					if_block1.c();
					if_block1.m(div, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty & /*data*/ 1) show_if_1 = /*format*/ ctx[3](/*data*/ ctx[0].article);

			if (show_if_1) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*data*/ 1) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_3(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div, t2);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (dirty & /*data*/ 1) show_if = /*format*/ ctx[3](/*data*/ ctx[0].source_link);

			if (show_if) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block_2(ctx);
					if_block3.c();
					if_block3.m(div, null);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block2);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block2);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(main);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(172:0) {:else}",
		ctx
	});

	return block;
}

// (163:0) {#if data.is_custom_html}
function create_if_block(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*data*/ ctx[0].footer !== undefined && create_if_block_1(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*data*/ ctx[0].footer !== undefined) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*data*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(163:0) {#if data.is_custom_html}",
		ctx
	});

	return block;
}

// (175:12) {#if format(data.thumbnail)}
function create_if_block_9(ctx) {
	let div;
	let img;
	let img_src_value;
	let img_title_value;
	let img_alt_value;
	let style_transform = `translate(0px, ${-/*y*/ ctx[2] / 4}px)`;
	let style_margin_top = `${/*height*/ ctx[1]}px`;

	const block = {
		c: function create() {
			div = element("div");
			img = element("img");
			if (!src_url_equal(img.src, img_src_value = /*data*/ ctx[0].thumbnail)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "title", img_title_value = /*data*/ ctx[0].title);
			attr_dev(img, "alt", img_alt_value = /*data*/ ctx[0].title);
			attr_dev(img, "onerror", func);
			attr_dev(img, "class", "svelte-183d3z7");
			add_location(img, file, 178, 20, 4877);
			attr_dev(div, "class", "header svelte-183d3z7");
			set_style(div, "transform", style_transform, false);
			set_style(div, "margin-top", style_margin_top, false);
			add_location(div, file, 175, 16, 4725);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, img);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*data*/ 1 && !src_url_equal(img.src, img_src_value = /*data*/ ctx[0].thumbnail)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*data*/ 1 && img_title_value !== (img_title_value = /*data*/ ctx[0].title)) {
				attr_dev(img, "title", img_title_value);
			}

			if (dirty & /*data*/ 1 && img_alt_value !== (img_alt_value = /*data*/ ctx[0].title)) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (dirty & /*y*/ 4 && style_transform !== (style_transform = `translate(0px, ${-/*y*/ ctx[2] / 4}px)`)) {
				set_style(div, "transform", style_transform, false);
			}

			if (dirty & /*height*/ 2 && style_margin_top !== (style_margin_top = `${/*height*/ ctx[1]}px`)) {
				set_style(div, "margin-top", style_margin_top, false);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_9.name,
		type: "if",
		source: "(175:12) {#if format(data.thumbnail)}",
		ctx
	});

	return block;
}

// (190:12) {#if format(data.video)}
function create_if_block_8(ctx) {
	let div;
	let video;
	let source;
	let source_src_value;
	let t;
	let br;

	const block = {
		c: function create() {
			div = element("div");
			video = element("video");
			source = element("source");
			t = text("\n                        Your browser doesn\\'t support HTML5 video tag.");
			br = element("br");
			if (!src_url_equal(source.src, source_src_value = /*data*/ ctx[0].video)) attr_dev(source, "src", source_src_value);
			attr_dev(source, "type", "video/mp4");
			add_location(source, file, 193, 24, 5742);
			add_location(br, file, 194, 70, 5857);
			attr_dev(video, "width", "480");
			attr_dev(video, "height", "360");
			video.controls = true;
			attr_dev(video, "preload", "metadata");
			add_location(video, file, 192, 20, 5657);
			attr_dev(div, "class", "mt-5 text-center");
			add_location(div, file, 190, 16, 5540);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, video);
			append_dev(video, source);
			append_dev(video, t);
			append_dev(video, br);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*data*/ 1 && !src_url_equal(source.src, source_src_value = /*data*/ ctx[0].video)) {
				attr_dev(source, "src", source_src_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_8.name,
		type: "if",
		source: "(190:12) {#if format(data.video)}",
		ctx
	});

	return block;
}

// (199:12) {#if format(data.article)}
function create_if_block_3(ctx) {
	let article;
	let section;
	let h1;
	let t0_value = /*format*/ ctx[3](/*data*/ ctx[0].title) + "";
	let t0;
	let t1;
	let div0;
	let show_if = /*format*/ ctx[3](/*data*/ ctx[0].author_image);
	let t2;
	let t3;
	let div1;
	let raw_value = stringToDom(/*data*/ ctx[0].article) + "";
	let t4;
	let current;
	let if_block0 = show_if && create_if_block_7(ctx);

	function select_block_type_1(ctx, dirty) {
		if (/*data*/ ctx[0].type != 'rewara') return create_if_block_5;
		if (/*data*/ ctx[0].type == 'rewara') return create_if_block_6;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block1 = current_block_type && current_block_type(ctx);
	let if_block2 = /*data*/ ctx[0].footer !== undefined && create_if_block_4(ctx);

	const block = {
		c: function create() {
			article = element("article");
			section = element("section");
			h1 = element("h1");
			t0 = text(t0_value);
			t1 = space();
			div0 = element("div");
			if (if_block0) if_block0.c();
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			div1 = element("div");
			t4 = space();
			if (if_block2) if_block2.c();
			attr_dev(h1, "class", "svelte-183d3z7");
			add_location(h1, file, 201, 24, 6094);
			attr_dev(div0, "class", "author svelte-183d3z7");
			add_location(div0, file, 203, 24, 6268);
			add_location(div1, file, 215, 24, 7159);
			attr_dev(section, "class", "content svelte-183d3z7");
			add_location(section, file, 200, 20, 6044);
			attr_dev(article, "class", "svelte-183d3z7");
			add_location(article, file, 199, 16, 6014);
		},
		m: function mount(target, anchor) {
			insert_dev(target, article, anchor);
			append_dev(article, section);
			append_dev(section, h1);
			append_dev(h1, t0);
			append_dev(section, t1);
			append_dev(section, div0);
			if (if_block0) if_block0.m(div0, null);
			append_dev(div0, t2);
			if (if_block1) if_block1.m(div0, null);
			append_dev(section, t3);
			append_dev(section, div1);
			div1.innerHTML = raw_value;
			append_dev(article, t4);
			if (if_block2) if_block2.m(article, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if ((!current || dirty & /*data*/ 1) && t0_value !== (t0_value = /*format*/ ctx[3](/*data*/ ctx[0].title) + "")) set_data_dev(t0, t0_value);
			if (dirty & /*data*/ 1) show_if = /*format*/ ctx[3](/*data*/ ctx[0].author_image);

			if (show_if) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_7(ctx);
					if_block0.c();
					if_block0.m(div0, t2);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if (if_block1) if_block1.d(1);
				if_block1 = current_block_type && current_block_type(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(div0, null);
				}
			}

			if ((!current || dirty & /*data*/ 1) && raw_value !== (raw_value = stringToDom(/*data*/ ctx[0].article) + "")) div1.innerHTML = raw_value;
			if (/*data*/ ctx[0].footer !== undefined) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*data*/ 1) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_4(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(article, null);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block2);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block2);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(article);
			if (if_block0) if_block0.d();

			if (if_block1) {
				if_block1.d();
			}

			if (if_block2) if_block2.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(199:12) {#if format(data.article)}",
		ctx
	});

	return block;
}

// (205:28) {#if format(data.author_image)}
function create_if_block_7(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;

	const block = {
		c: function create() {
			img = element("img");
			attr_dev(img, "class", "authorpic svelte-183d3z7");

			if (!src_url_equal(img.src, img_src_value = ({
				"env": {
					"DOMAIN": "https://admin-dev.jurno.id/",
					"URL_API": "https://api-dev.jurno.id/api/newsmap/v1/",
					"URL_IMAGE": "https://admin-dev.newsmap.id/uploads/",
					"URL_CUSTOM_HTML": "https://admin-dev.newsmap.id/files/",
					"NO_IMAGE": "./image/logo-jurno-web.svg",
					"isProd": false
				}
			})["env"]["URL_IMAGE"] + "author/" + /*data*/ ctx[0].author_image)) attr_dev(img, "src", img_src_value);

			attr_dev(img, "alt", img_alt_value = /*data*/ ctx[0].author_name);
			add_location(img, file, 205, 28, 6377);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*data*/ 1 && !src_url_equal(img.src, img_src_value = ({
				"env": {
					"DOMAIN": "https://admin-dev.jurno.id/",
					"URL_API": "https://api-dev.jurno.id/api/newsmap/v1/",
					"URL_IMAGE": "https://admin-dev.newsmap.id/uploads/",
					"URL_CUSTOM_HTML": "https://admin-dev.newsmap.id/files/",
					"NO_IMAGE": "./image/logo-jurno-web.svg",
					"isProd": false
				}
			})["env"]["URL_IMAGE"] + "author/" + /*data*/ ctx[0].author_image)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*data*/ 1 && img_alt_value !== (img_alt_value = /*data*/ ctx[0].author_name)) {
				attr_dev(img, "alt", img_alt_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_7.name,
		type: "if",
		source: "(205:28) {#if format(data.author_image)}",
		ctx
	});

	return block;
}

// (212:60) 
function create_if_block_6(ctx) {
	let span;

	const block = {
		c: function create() {
			span = element("span");
			span.textContent = "Rewara";
			attr_dev(span, "class", "authorname svelte-183d3z7");
			add_location(span, file, 212, 28, 7031);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6.name,
		type: "if",
		source: "(212:60) ",
		ctx
	});

	return block;
}

// (210:28) {#if data.type != 'rewara'}
function create_if_block_5(ctx) {
	let span;
	let t_value = /*data*/ ctx[0].author_name + "";
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text(t_value);
			attr_dev(span, "class", "authorname svelte-183d3z7");
			add_location(span, file, 210, 28, 6891);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*data*/ 1 && t_value !== (t_value = /*data*/ ctx[0].author_name + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(210:28) {#if data.type != 'rewara'}",
		ctx
	});

	return block;
}

// (221:20) {#if data.footer !== undefined}
function create_if_block_4(ctx) {
	let foot;
	let current;
	const foot_spread_levels = [/*data*/ ctx[0].footer, { type: /*data*/ ctx[0].type }];
	let foot_props = {};

	for (let i = 0; i < foot_spread_levels.length; i += 1) {
		foot_props = assign(foot_props, foot_spread_levels[i]);
	}

	foot = new Foot({ props: foot_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(foot.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(foot, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const foot_changes = (dirty & /*data*/ 1)
			? get_spread_update(foot_spread_levels, [
					get_spread_object(/*data*/ ctx[0].footer),
					{ type: /*data*/ ctx[0].type }
				])
			: {};

			foot.$set(foot_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(foot.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(foot.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(foot, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(221:20) {#if data.footer !== undefined}",
		ctx
	});

	return block;
}

// (230:12) {#if format(data.source_link)}
function create_if_block_2(ctx) {
	let div;
	let a;
	let t;
	let a_href_value;

	const block = {
		c: function create() {
			div = element("div");
			a = element("a");
			t = text("Source link");
			attr_dev(a, "href", a_href_value = /*data*/ ctx[0].source_link);
			attr_dev(a, "target", "_blank");
			attr_dev(a, "rel", "noreferrer");
			add_location(a, file, 231, 20, 7718);
			attr_dev(div, "class", "mt-5");
			add_location(div, file, 230, 16, 7679);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, a);
			append_dev(a, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*data*/ 1 && a_href_value !== (a_href_value = /*data*/ ctx[0].source_link)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(230:12) {#if format(data.source_link)}",
		ctx
	});

	return block;
}

// (164:4) {#if data.footer !== undefined}
function create_if_block_1(ctx) {
	let foot;
	let current;

	const foot_spread_levels = [
		/*data*/ ctx[0].footer,
		{ type: /*data*/ ctx[0].type },
		{
			bgFooter: /*data*/ ctx[0].footer_background_color
		},
		{
			txtFooter: /*data*/ ctx[0].article_background_color
		}
	];

	let foot_props = {};

	for (let i = 0; i < foot_spread_levels.length; i += 1) {
		foot_props = assign(foot_props, foot_spread_levels[i]);
	}

	foot = new Foot({ props: foot_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(foot.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(foot, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const foot_changes = (dirty & /*data*/ 1)
			? get_spread_update(foot_spread_levels, [
					get_spread_object(/*data*/ ctx[0].footer),
					{ type: /*data*/ ctx[0].type },
					{
						bgFooter: /*data*/ ctx[0].footer_background_color
					},
					{
						txtFooter: /*data*/ ctx[0].article_background_color
					}
				])
			: {};

			foot.$set(foot_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(foot.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(foot.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(foot, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(164:4) {#if data.footer !== undefined}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let scrolling = false;

	let clear_scrolling = () => {
		scrolling = false;
	};

	let scrolling_timeout;
	let title_value;
	let meta0;
	let meta1;
	let meta2;
	let meta3;
	let meta4;
	let meta4_content_value;
	let meta5;
	let meta6;
	let meta7;
	let meta8;
	let meta9;
	let meta10;
	let meta11;
	let meta12;
	let meta13;
	let meta13_content_value;
	let meta14;
	let meta15;
	let meta16;
	let meta16_content_value;
	let meta17;
	let meta18;
	let meta19;
	let meta20;
	let meta21;
	let meta22;
	let meta22_content_value;
	let meta23;
	let meta23_content_value;
	let meta24;
	let meta24_content_value;
	let meta25;
	let t;
	let current_block_type_index;
	let if_block1;
	let if_block1_anchor;
	let current;
	let mounted;
	let dispose;
	add_render_callback(/*onwindowscroll*/ ctx[4]);
	document_1.title = title_value = /*data*/ ctx[0].title;
	let if_block0 = /*data*/ ctx[0].is_custom_html && create_if_block_10(ctx);
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*data*/ ctx[0].is_custom_html) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			meta0 = element("meta");
			meta1 = element("meta");
			meta2 = element("meta");
			meta3 = element("meta");
			meta4 = element("meta");
			meta5 = element("meta");
			meta6 = element("meta");
			meta7 = element("meta");
			meta8 = element("meta");
			meta9 = element("meta");
			meta10 = element("meta");
			meta11 = element("meta");
			meta12 = element("meta");
			meta13 = element("meta");
			meta14 = element("meta");
			meta15 = element("meta");
			meta16 = element("meta");
			meta17 = element("meta");
			meta18 = element("meta");
			meta19 = element("meta");
			meta20 = element("meta");
			meta21 = element("meta");
			meta22 = element("meta");
			meta23 = element("meta");
			meta24 = element("meta");
			meta25 = element("meta");
			t = space();
			if_block1.c();
			if_block1_anchor = empty();
			attr_dev(meta0, "data-n-head", "true");
			attr_dev(meta0, "data-hid", "charset");
			attr_dev(meta0, "charset", "utf-8");
			add_location(meta0, file, 33, 4, 936);
			attr_dev(meta1, "data-n-head", "true");
			attr_dev(meta1, "data-hid", "mobile-web-app-capable");
			attr_dev(meta1, "name", "mobile-web-app-capable");
			attr_dev(meta1, "content", "yes");
			add_location(meta1, file, 34, 4, 1003);
			attr_dev(meta2, "data-n-head", "true");
			attr_dev(meta2, "data-hid", "description");
			attr_dev(meta2, "name", "description");
			attr_dev(meta2, "content", "");
			add_location(meta2, file, 40, 4, 1149);
			attr_dev(meta3, "data-n-head", "true");
			attr_dev(meta3, "http-equiv", "x-ua-compatiable");
			attr_dev(meta3, "content", "IE=edge,chrome=1");
			add_location(meta3, file, 46, 4, 1270);
			attr_dev(meta4, "data-n-head", "true");
			attr_dev(meta4, "name", "title");
			attr_dev(meta4, "content", meta4_content_value = /*data*/ ctx[0].title);
			add_location(meta4, file, 51, 4, 1387);
			attr_dev(meta5, "data-n-head", "true");
			attr_dev(meta5, "name", "googlebot-news");
			attr_dev(meta5, "content", "index,follow");
			add_location(meta5, file, 56, 4, 1481);
			attr_dev(meta6, "data-n-head", "true");
			attr_dev(meta6, "name", "googlebot");
			attr_dev(meta6, "content", "index,follow");
			add_location(meta6, file, 61, 4, 1586);
			attr_dev(meta7, "data-n-head", "true");
			attr_dev(meta7, "name", "robots");
			attr_dev(meta7, "content", "index,follow");
			add_location(meta7, file, 61, 71, 1653);
			attr_dev(meta8, "data-n-head", "true");
			attr_dev(meta8, "name", "robots");
			attr_dev(meta8, "content", "max-snippet:50, max-image-preview:large");
			add_location(meta8, file, 66, 4, 1750);
			attr_dev(meta9, "data-n-head", "true");
			attr_dev(meta9, "name", "language");
			attr_dev(meta9, "content", "id");
			add_location(meta9, file, 71, 4, 1874);
			attr_dev(meta10, "data-n-head", "true");
			attr_dev(meta10, "name", "geo.country");
			attr_dev(meta10, "content", "id");
			add_location(meta10, file, 71, 60, 1930);
			attr_dev(meta11, "data-n-head", "true");
			attr_dev(meta11, "name", "geo.placename");
			attr_dev(meta11, "content", "Indonesia");
			add_location(meta11, file, 76, 4, 2022);
			attr_dev(meta12, "data-n-head", "true");
			attr_dev(meta12, "http-equiv", "content-language");
			attr_dev(meta12, "content", "In-Id");
			add_location(meta12, file, 76, 72, 2090);
			attr_dev(meta13, "data-n-head", "true");
			attr_dev(meta13, "property", "og:image");
			attr_dev(meta13, "content", meta13_content_value = /*data*/ ctx[0].thumbnail_social);
			add_location(meta13, file, 81, 4, 2196);
			attr_dev(meta14, "data-n-head", "true");
			attr_dev(meta14, "property", "og:locale");
			attr_dev(meta14, "content", "id_ID");
			add_location(meta14, file, 86, 4, 2308);
			attr_dev(meta15, "data-n-head", "true");
			attr_dev(meta15, "property", "og:type");
			attr_dev(meta15, "content", "article");
			add_location(meta15, file, 86, 68, 2372);
			attr_dev(meta16, "data-n-head", "true");
			attr_dev(meta16, "property", "og:title");
			attr_dev(meta16, "content", meta16_content_value = /*data*/ ctx[0].title);
			add_location(meta16, file, 91, 4, 2469);
			attr_dev(meta17, "data-n-head", "true");
			attr_dev(meta17, "property", "og:image:width");
			attr_dev(meta17, "content", "600");
			add_location(meta17, file, 112, 4, 3083);
			attr_dev(meta18, "data-n-head", "true");
			attr_dev(meta18, "property", "og:image:height");
			attr_dev(meta18, "content", "315");
			add_location(meta18, file, 112, 71, 3150);
			attr_dev(meta19, "data-n-head", "true");
			attr_dev(meta19, "property", "og:site_name");
			attr_dev(meta19, "content", "jurno.id");
			add_location(meta19, file, 117, 4, 3251);
			attr_dev(meta20, "data-n-head", "true");
			attr_dev(meta20, "name", "twitter:card");
			attr_dev(meta20, "content", "summary_large_image");
			add_location(meta20, file, 128, 4, 3518);
			attr_dev(meta21, "data-n-head", "true");
			attr_dev(meta21, "data-hid", "description_tw");
			attr_dev(meta21, "name", "twitter:description");
			attr_dev(meta21, "content", "");
			add_location(meta21, file, 133, 4, 3628);
			attr_dev(meta22, "data-n-head", "true");
			attr_dev(meta22, "name", "twitter:image");
			attr_dev(meta22, "content", meta22_content_value = /*data*/ ctx[0].thumbnail_social);
			add_location(meta22, file, 139, 4, 3760);
			attr_dev(meta23, "data-n-head", "true");
			attr_dev(meta23, "name", "twitter:image:src");
			attr_dev(meta23, "content", meta23_content_value = /*data*/ ctx[0].thumbnail_social);
			add_location(meta23, file, 144, 4, 3873);
			attr_dev(meta24, "data-n-head", "true");
			attr_dev(meta24, "name", "thumbnail");
			attr_dev(meta24, "content", meta24_content_value = /*data*/ ctx[0].thumbnail_social);
			add_location(meta24, file, 149, 4, 3990);
			attr_dev(meta25, "data-n-head", "true");
			attr_dev(meta25, "data-hid", "viewport");
			attr_dev(meta25, "name", "viewport");
			attr_dev(meta25, "content", "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no");
			add_location(meta25, file, 154, 4, 4099);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(document_1.head, null);
			append_dev(document_1.head, meta0);
			append_dev(document_1.head, meta1);
			append_dev(document_1.head, meta2);
			append_dev(document_1.head, meta3);
			append_dev(document_1.head, meta4);
			append_dev(document_1.head, meta5);
			append_dev(document_1.head, meta6);
			append_dev(document_1.head, meta7);
			append_dev(document_1.head, meta8);
			append_dev(document_1.head, meta9);
			append_dev(document_1.head, meta10);
			append_dev(document_1.head, meta11);
			append_dev(document_1.head, meta12);
			append_dev(document_1.head, meta13);
			append_dev(document_1.head, meta14);
			append_dev(document_1.head, meta15);
			append_dev(document_1.head, meta16);
			append_dev(document_1.head, meta17);
			append_dev(document_1.head, meta18);
			append_dev(document_1.head, meta19);
			append_dev(document_1.head, meta20);
			append_dev(document_1.head, meta21);
			append_dev(document_1.head, meta22);
			append_dev(document_1.head, meta23);
			append_dev(document_1.head, meta24);
			append_dev(document_1.head, meta25);
			insert_dev(target, t, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block1_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = listen_dev(window, "scroll", () => {
					scrolling = true;
					clearTimeout(scrolling_timeout);
					scrolling_timeout = setTimeout_1(clear_scrolling, 100);
					/*onwindowscroll*/ ctx[4]();
				});

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*y*/ 4 && !scrolling) {
				scrolling = true;
				clearTimeout(scrolling_timeout);
				scrollTo(window.pageXOffset, /*y*/ ctx[2]);
				scrolling_timeout = setTimeout_1(clear_scrolling, 100);
			}

			if ((!current || dirty & /*data*/ 1) && title_value !== (title_value = /*data*/ ctx[0].title)) {
				document_1.title = title_value;
			}

			if (/*data*/ ctx[0].is_custom_html) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_10(ctx);
					if_block0.c();
					if_block0.m(meta0.parentNode, meta0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (!current || dirty & /*data*/ 1 && meta4_content_value !== (meta4_content_value = /*data*/ ctx[0].title)) {
				attr_dev(meta4, "content", meta4_content_value);
			}

			if (!current || dirty & /*data*/ 1 && meta13_content_value !== (meta13_content_value = /*data*/ ctx[0].thumbnail_social)) {
				attr_dev(meta13, "content", meta13_content_value);
			}

			if (!current || dirty & /*data*/ 1 && meta16_content_value !== (meta16_content_value = /*data*/ ctx[0].title)) {
				attr_dev(meta16, "content", meta16_content_value);
			}

			if (!current || dirty & /*data*/ 1 && meta22_content_value !== (meta22_content_value = /*data*/ ctx[0].thumbnail_social)) {
				attr_dev(meta22, "content", meta22_content_value);
			}

			if (!current || dirty & /*data*/ 1 && meta23_content_value !== (meta23_content_value = /*data*/ ctx[0].thumbnail_social)) {
				attr_dev(meta23, "content", meta23_content_value);
			}

			if (!current || dirty & /*data*/ 1 && meta24_content_value !== (meta24_content_value = /*data*/ ctx[0].thumbnail_social)) {
				attr_dev(meta24, "content", meta24_content_value);
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block1 = if_blocks[current_block_type_index];

				if (!if_block1) {
					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block1.c();
				} else {
					if_block1.p(ctx, dirty);
				}

				transition_in(if_block1, 1);
				if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block0) if_block0.d(detaching);
			detach_dev(meta0);
			detach_dev(meta1);
			detach_dev(meta2);
			detach_dev(meta3);
			detach_dev(meta4);
			detach_dev(meta5);
			detach_dev(meta6);
			detach_dev(meta7);
			detach_dev(meta8);
			detach_dev(meta9);
			detach_dev(meta10);
			detach_dev(meta11);
			detach_dev(meta12);
			detach_dev(meta13);
			detach_dev(meta14);
			detach_dev(meta15);
			detach_dev(meta16);
			detach_dev(meta17);
			detach_dev(meta18);
			detach_dev(meta19);
			detach_dev(meta20);
			detach_dev(meta21);
			detach_dev(meta22);
			detach_dev(meta23);
			detach_dev(meta24);
			detach_dev(meta25);
			if (detaching) detach_dev(t);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block1_anchor);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const func = e => {
	e.target.onerror = null;

	e.target.src = ({
		"env": {
			"DOMAIN": "https://admin-dev.jurno.id/",
			"URL_API": "https://api-dev.jurno.id/api/newsmap/v1/",
			"URL_IMAGE": "https://admin-dev.newsmap.id/uploads/",
			"URL_CUSTOM_HTML": "https://admin-dev.newsmap.id/files/",
			"NO_IMAGE": "./image/logo-jurno-web.svg",
			"isProd": false
		}
	})["env"]["NO_IMAGE"];
};

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('ArticleDetail', slots, []);
	let { data = {} } = $$props;

	const format = text => {
		return text !== undefined ? text : null;
	};

	let y;
	let { height } = $$props;

	if (data.is_custom_html) {
		setTimeout(
			() => {
				const footer = document.querySelector("nav.footer");
				document.querySelector("body").append(footer);
			},
			1000
		);
	}

	const writable_props = ['data', 'height'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ArticleDetail> was created with unknown prop '${key}'`);
	});

	function onwindowscroll() {
		$$invalidate(2, y = window.pageYOffset);
	}

	$$self.$$set = $$props => {
		if ('data' in $$props) $$invalidate(0, data = $$props.data);
		if ('height' in $$props) $$invalidate(1, height = $$props.height);
	};

	$$self.$capture_state = () => ({
		stringToDom,
		moment,
		Head,
		Foot,
		afterUpdate,
		data,
		format,
		y,
		height
	});

	$$self.$inject_state = $$props => {
		if ('data' in $$props) $$invalidate(0, data = $$props.data);
		if ('y' in $$props) $$invalidate(2, y = $$props.y);
		if ('height' in $$props) $$invalidate(1, height = $$props.height);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [data, height, y, format, onwindowscroll];
}

class ArticleDetail extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { data: 0, height: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ArticleDetail",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*height*/ ctx[1] === undefined && !('height' in props)) {
			console.warn("<ArticleDetail> was created without expected prop 'height'");
		}
	}

	get data() {
		throw new Error("<ArticleDetail>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set data(value) {
		throw new Error("<ArticleDetail>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<ArticleDetail>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<ArticleDetail>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { ArticleDetail as default };
//# sourceMappingURL=ArticleDetail-18037715.js.map
